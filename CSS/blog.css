*,
*::before,
*::after {
  box-sizing: border-box;
}

/*The body is 100vh to accomodate mobile screen so that all the sign in appears without scrolling */

body {
  height: 100vh;
  display: flex;
  flex-direction: column;
}

/*==========WEBSITE HEADER=====================*/

#profilePic {
  border-radius: 50%;
}
/*==========POST FUNCTIONS====================*/
/*postFunctions consist of the text box to creae a new post, a postButton, and the button to sort by date. 
We ensure they're aligned as a column with spacing in between to make it easier to read. 
We align both postButton and sortByDate to the right, and use width to avoid making it too wide  */

.postedContentLog {
  overflow: scroll; /* scrollbars are added to the container to allow the user to scroll through the overflowed content.*/
  height: 500px;
}
.postFunctions {
  display: flex;
  flex-direction: column;
  gap: 20px;
  padding-bottom: 50px;
}

#postButton,
#sortByDate {
  width: 50%;
  align-self: flex-end;
}

/* to style the JS DOM butons of likeButton and commentButton so that they appear in a column format
postBox is a class that applies to the newPostDiv under which like button, newComment, and commentButton (and delete commment button) are attached   */

.jsFlex {
  display: flex;
  flex-direction: column;
  margin-bottom: 10px; /* Optional: Add margin for spacing between posts */
  gap: 20px;
}

/*jsComment is how new comments should appear- it includes the box that contains the new comment ouptut and delete button, shifted to the right a bit. I was able to add background color white here so that it would show as white in dark mode, as workaround to overried other in dark Mode the body background black overrode the white backgroudn!*/
.jsNewComment {
  width: 75%;
  margin-left: 50px;
  display: flex;
  flex-direction: column;
  background-color: white;
  border: 1px solid black;
  color: black;
  line-height: 4em;
  position: relative;
}
/*like and comment buttons*/
.jsButton {
  width: 25%;
}
/*delete button- used absolute to have it at top right and parent container uses relative */
.jsDeleteButton {
  width: 10%;
  position: absolute;
  top: 0;
  right: 0;
}
.sortByDate {
  position: relative; /* Ensure relative positioning for absolute positioning of dropdown*/
}

.dateOption {
  position: absolute; /* Position the dropdown options absolutely */
  top: 100%; /* Position the options below the dropdown header */
  right: 0; /* Align the options with the left edge of the dropdown */
  left: auto;
}

/*==========FOOTER=====================*/
/*To move the footer to the bottom of the page in mobile, we use margin-top: auto and ensue the body is formatted as a column*/

footer {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  margin-top: auto;
}

/*==========HAMBURGER MENU=====================*/

/*Credit to https://dev.to/devggaurav/let-s-build-a-responsive-navbar-and-hamburger-menu-using-html-css-and-javascript-4gci  for the tutorial!*/
/*First, let's remove the bullet points and remove the hyperlinks*/
li {
  list-style: none;
}

a {
  text-decoration: underline;
}

/*.navbar consists of the photo and the other page links* We are putting them in a flex row display for normal layout. With the tutorial I was following, they showed desktop settings first- which is why hamburger had display of none- and only revealed by media query below when we are under a certain screen size. We give it space from the post content with a margin-bottom*/

.navbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem 1.5rem;
  margin-bottom: 50px;
  border: 5px solid purple;
}

/*Hamburger styles- with desktop, we don't want the hamburger to show- however again, keep in mind- we do use media query below to ensure it does show on mobile . :)*/
.hamburger {
  display: none;
}

/*Here we define how the hamburger icon should animate itself as well as the size*/

.bar {
  display: block;
  width: 25px;
  height: 3px;
  margin: 5px auto;
  -webkit-transition: all 0.3s ease-in-out;
  transition: all 0.3s ease-in-out;
  background-color: gray;
}

.nav-menu {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin: 0;
  padding: 0;
}

/* format for each li item in burger menu */
.nav-item {
  line-height: 30px;
  margin: 0;
  overflow: hidden;
  padding: 5px;
  position: relative;
  text-align: left;
  text-transform: uppercase;
  padding-left: 15px;
}

/* Adding thea bility for links to be highlighted when hovered over, making it easier to see #accessibilty */

.nav-menu li:hover {
  background: #cccccc;
}

.nav-menu li:active,
.nav-menu li:focus {
  background: #cccccc;
}
.nav-link {
  font-size: 1.6rem;
  font-weight: 400;
  color: #475569;
}

.nav-link:hover {
  color: #482ff7;
}

/*==========RESPONSIVE=====================*/
/* The styling below makes the blogHeader not appear in desktop since the menu will take precedence
We also make sure the buttons of postButton, sortByButton, and the likeButton and CommentButton created in JS appear smaller in desktop*/

@media screen and (min-width: 768px) {
  #postButton,
  #sortByDate {
    width: 25%;
  }
  .jsButton {
    width: 25%;
    box-shadow: 5px 2px #888888;
  }
  main {
    display: flex;
    flex-direction: row;
    /* flex-wrap: wrap; */
  }
  .mainPostStuff {
    width: 70%;
    border: 5px solid purple;
    padding: 20px;
  }
  .fetchAside {
    width: 30%;
    border: 5px solid purple;

    display: flex;
    flex-direction: column;
    align-items: center;
  }
}

/*defining the hamburger menu here :) Added width and height*/
@media screen and (max-width: 768px) {
  .nav-menu {
    position: fixed;
    left: -100%;
    top: 0;
    flex-direction: column;
    background-color: #ebebeb;
    height: 100vh;
    width: 75%;
    border-radius: 10px;
    text-align: center;
    transition: 0.3s;
    box-shadow: 0 10px 27px rgba(0, 0, 0, 0.05);
  }

  .nav-menu.active {
    left: 0;
  }

  .nav-item {
    margin: 2.5rem 0;
  }

  .hamburger {
    display: block;
    cursor: pointer;
  }

  .fetchAside {
    display: none;
  }
}
